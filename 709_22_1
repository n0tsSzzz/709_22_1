---1

drop table if exists article, comment cascade;
create table article
(
	id int primary key generated by default as identity,
	name varchar(52),
	publication_date date,
	article_text text
);

insert into article (name, publication_date, article_text)
values
	('How to center div', '2011/11/11', 'why its not ez to center div'),
	('How to escape from Vim', '2009/12/16', 'its really interestnig question'),
	('IT-college Sirius, the best one?', '2023/10/9', 'Today i tell u why sirius college is the best');

create table comment
(
	id int primary key generated by default as identity,
	id_article int references article,
	comment_text text,
	publication_date date
);

insert into comment (id_article, comment_text, publication_date)
values
	(1, 'Nah.. Its really hard', '2020/9/12'),
	(1, 'No comments', '2018/1/2'),
	(2, 'Why did they do that stupid hotkey', '2019/6/5');
	

select
  article.id,
  article.name,
  article.publication_date,
  article.article_text,
  coalesce(jsonb_agg(json_build_object(
	'id', comment.id, 'comments', comment.comment_text, 'date', comment.publication_date))
	filter (where comment.id is not null), '[]') as comment
from article
left join comment
	on comment.id_article = article.id
group by article.id
order by article.id asc;


--- 2

drop table if exists deliever, order_ cascade;
create table deliever
(
	id int primary key generated by default as identity,
	name varchar(52),
	surname varchar(52),
	phone varchar(23)
);

insert into deliever (name, surname, phone)
values
	('Marko', 'Arsenovich', '81984060799'),
	('Dima', 'Vasilenko', '+79893026477'),
	('Fedya', 'Ozornin', '+3894050492');

create table order_
(
	id int primary key generated by default as identity,
	id_deliever int references deliever,
	addres varchar(52),
	order_date date,
	status varchar(52)
);

insert into order_ (id_deliever, addres, order_date, status)
values
	(1, 'Gorkogo, 87', '2024/2/12', 'в пути'),
	(1, 'Gorkogo, 87', '2024/2/20', 'доставлен'),
	(2, 'Voskresenkaya, 12', '2011/11/6', 'отменен');
	

select
  deliever.id,
  deliever.name,
  deliever.surname,
  deliever.phone,
  coalesce(jsonb_agg(json_build_object(
	'id', order_.id, 'addres', order_.addres, 'date', order_.order_date, 'status', order_.status))
	filter (where order_.id is not null), '[]') as order_
from deliever
left join order_
	on order_.id_deliever = deliever.id
group by deliever.id
order by deliever.id asc;



-- 3

drop table if exists appeal, сomments cascade;
create table appeal
(
	id int primary key generated by default as identity,
	number int,
	appeal_date date,
	status varchar(52)
);

insert into appeal (number, appeal_date, status)
values
	(777, '2024/1/1', 'На рассмотрении'),
	(666, '2023/12/1', 'Одобрено'),
	(123, '2023/8/13', 'Отклонено');

create table сomments
(
	id int primary key generated by default as identity,
	id_appeal int references appeal,
	comments_text text,
	publication_date date
);

insert into сomments (id_appeal, comments_text, publication_date)
values
	(1, 'Мы рассмотрим ваше обращение', '2024/1/2'),
	(1, 'Все еще рассматриваем', '2024/2/2'),
	(2, 'Ваше обращение одобрено', '2023/8/14');
	

select
  appeal.id,
  appeal.number,
  appeal.appeal_date,
  appeal.status,
  coalesce(jsonb_agg(json_build_object(
	'id', сomments.id, 'text', сomments.comments_text, 'date', сomments.publication_date))
	filter (where сomments.id is not null), '[]') as сomments
from appeal
left join сomments
	on сomments.id_appeal = appeal.id
group by appeal.id
order by appeal.id asc;
